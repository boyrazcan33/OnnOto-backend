# Use PostGIS as the base image
FROM postgis/postgis:15-3.3

# Install the correct Java version
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    wget ca-certificates && \
    wget https://download.java.net/java/GA/jdk21.0.1/415e3f918a1f4062a0074a2794853d0d/12/GPL/openjdk-21.0.1_linux-x64_bin.tar.gz -O /tmp/openjdk.tar.gz && \
    mkdir -p /usr/lib/jvm && \
    tar -xzf /tmp/openjdk.tar.gz -C /usr/lib/jvm && \
    rm /tmp/openjdk.tar.gz && \
    apt-get remove -y wget && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Set Java environment
ENV JAVA_HOME=/usr/lib/jvm/jdk-21.0.1
ENV PATH=$JAVA_HOME/bin:$PATH

# Verify Java installation
RUN java -version

# Set up working directory
WORKDIR /app

# Copy your backend application
COPY onnoto-backend/ ./onnoto-backend/

# Build the application
RUN cd onnoto-backend && \
    chmod +x mvnw && \
    ./mvnw package -DskipTests

# Create a wrapper script that will be our entrypoint
RUN echo '#!/bin/bash\n\
\n\
# Start the Spring Boot application\n\
start_app() {\n\
  cd /app/onnoto-backend\n\
  export JAVA_OPTS="-Xms128m -Xmx256m -XX:+UseG1GC -XX:MaxMetaspaceSize=96m -XX:+HeapDumpOnOutOfMemoryError"\n\
  echo "Starting Spring Boot application with JAVA_OPTS: $JAVA_OPTS"\n\
  exec java $JAVA_OPTS -jar target/onnoto-backend-0.0.1-SNAPSHOT.jar\n\
}\n\
\n\
# If first arg is "postgres", delegate to the original docker-entrypoint.sh\n\
if [ "$1" = "postgres" ]; then\n\
  shift\n\
  exec docker-entrypoint.sh postgres "$@"\n\
elif [ "$1" = "app" ]; then\n\
  start_app\n\
elif [ "$1" = "both" ] || [ -z "$1" ]; then\n\
  # Run both PostgreSQL and our app (for combined container deployment)\n\
  echo "Starting PostgreSQL database..."\n\
  docker-entrypoint.sh postgres &\n\
\n\
  # Wait for PostgreSQL to be ready\n\
  echo "Waiting for PostgreSQL to initialize..."\n\
  RETRIES=30\n\
  until pg_isready -h localhost -U postgres 2>/dev/null || [ $RETRIES -eq 0 ]; do\n\
    echo "Waiting for PostgreSQL... $((RETRIES--)) remaining attempts..."\n\
    sleep 3\n\
  done\n\
\n\
  if [ $RETRIES -eq 0 ]; then\n\
    echo "Failed to connect to PostgreSQL, exiting."\n\
    exit 1\n\
  fi\n\
\n\
  echo "PostgreSQL is ready."\n\
  sleep 2  # Give it a moment to stabilize\n\
\n\
  # Create database if needed and enable PostGIS\n\
  echo "Ensuring database exists..."\n\
  PGPASSWORD=${POSTGRES_PASSWORD:-postgres} psql -h localhost -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = '"'"'onnoto'"'"'" | grep -q 1 || \n\
    PGPASSWORD=${POSTGRES_PASSWORD:-postgres} psql -h localhost -U postgres -c "CREATE DATABASE onnoto"\n\
\n\
  echo "Enabling PostGIS extension..."\n\
  PGPASSWORD=${POSTGRES_PASSWORD:-postgres} psql -h localhost -U postgres -d onnoto -c "CREATE EXTENSION IF NOT EXISTS postgis;"\n\
\n\
  # Start the Spring Boot application\n\
  start_app\n\
else\n\
  # Pass through any other commands\n\
  exec "$@"\n\
fi\n\
' > /wrapper-entrypoint.sh

RUN chmod +x /wrapper-entrypoint.sh

# Expose ports
EXPOSE 5432 8087

# Use our wrapper entrypoint
ENTRYPOINT ["/wrapper-entrypoint.sh"]
CMD ["both"]